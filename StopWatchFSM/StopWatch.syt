package StopWatchFSM {
	 
	class StopWatch {      
		state OFF InitialState {     
			onFunc: turnOn outgoingState: READY   
		}         
		state READY {                         
			onFunc: start outgoingState: RUNNING    
			onFunc: turnOff outgoingState: OFF 
			runEntryFuncs: resetDisplay        
		}                                            
		state RUNNING {           
			onFunc: stop outgoingState: STOPPED    
			onFunc: split outgoingState: PAUSED
			onFunc: turnOff outgoingState: OFF        
			runEntryFuncs: ensureTimer syncDisplay 
		}            
		state STOPPED { 
			onFunc: reset outgoingState: READY 
			onFunc: turnOff outgoingState: OFF 
			runEntryFuncs: stopTimer
		}  
		state PAUSED {  
			onFunc: stop outgoingState: STOPPED 
			onFunc: unsplit outgoingState: RUNNING
			runEntryFuncs: freezeDisplay
		}   
		func turnOn() {}
		func turnOff() {}       
		func resetDisplay() {}        
		func ensureTimer() {}  
		func syncDisplay() {}     
		func start() {}       
		func stop() {}                
    	func stopTimer() {}                           
		func reset() {}                      
		func split() {}                      
		func unsplit() {}                  
		func freezeDisplay() {}                  
	}
	
	generateStateDiagram(Monochrome=true LineType=Curve metamodel: StopWatch )
	
	generateStateTransitionTable(Monochrome=true metamodel: StopWatch )	
	
	measureComplexity(
		filename: "StopWatch"
		definitionPackages: StopWatchFSM
	)
	
	generateProjectWebPage(
		title: "Systext Demo: FSM/StopWatch"
		taskPackages: StopWatchFSM  
	)
		
}
