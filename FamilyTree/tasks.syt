include "metamodels.syt"
include "objects.syt"
include "transformations.syt"
   
import FamilyTreeMetamodels.*         
import FamilyTreeTransformations.*  
                 
package Family {                    
	generateEmfaticMetaModelFile(metamodelPackages: FamilyTreeMetamodels)
	generateMetaModelStructuralViewByPackages(
		filename: "Metamodels"   
		Monochrome=true
		showPackage
		metamodelPackages: FamilyTreeMetamodels
	)     
	generateObjectStructuralViewByPackages(       
		filename: "Instances"       
		Monochrome=true       
		instancePackages: FamilyTreeObjects  
	)          
	generateEOLCreationScipt(      
		topLevelInstance: FamilyTreeObjects.Marry
		metamodelPackage: FamilyTreeMetamodels 
	)         
	generateEOLCreationScipt( 
		topLevelInstance: FamilyTreeObjects.Anna
		metamodelPackage: FamilyTreeMetamodels
	)            
	runM2TTransformation(
		filename: "MarryFamily"
		topLevelInstance: FamilyTreeObjects.Marry  
		transformer: Model2FamilyTreeDiagramTransformer
	)
	runM2TTransformation(
		filename: "AnnaFamily"
		topLevelInstance: FamilyTreeObjects.Anna
		transformer: Model2FamilyTreeDiagramTransformer
	)
	measureComplexity(
		filename: "FamilyTree"
		definitionPackages: FamilyTreeMetamodels FamilyTreeObjects
	) 
	query Single(
		FamilyTreeObjects::Member
			->Member.mate.sizeIsEqual(0)
	)->resultsToText()->resultsToDiagram()
	query Married(
		FamilyTreeObjects::Member
			->Member.mate.sizeIsGreaterThan(0)
	)->resultsToText()->resultsToDiagram()
	query HasOneKid(
		FamilyTreeObjects::Member
			->Member.kids.sizeIsEqual(1)
	)->resultsToText()->resultsToDiagram()
	query HasTwoKids(
		FamilyTreeObjects::Member
			->Member.kids.sizeIsEqual(2)
	)->resultsToText()->resultsToDiagram()
	query HasThreeKids(
		FamilyTreeObjects::Member
			->Member.kids.sizeIsEqual(3)
	)->resultsToText()->resultsToDiagram()
	generateProjectWebPage(
		title: "Systext Demo: DataStructure/FamilyTree"
		taskPackages: Family  
	)
}                                                                               