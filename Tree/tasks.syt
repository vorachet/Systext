include "metamodels.syt"
include "objects.syt"
include "transformations.syt"
include "queries.syt"

import  TreeMetamodels.*

package Tree {
	generateEmfaticMetaModelFile(metamodelPackages: TreeMetamodels)
	generateMetaModelStructuralView(
		filename: "All"
		Monochrome=true 
		metaModels: TreeMetamodels.Tree
	)   
	generateObjectStructuralView(
		filename: "Animal"
		Monochrome=true
		topLevelObject: TreeObjects.Animal
	)
	generateObjectStructuralView(
		filename: "All"
		Monochrome=true  
		topLevelObject: TreeObjects.Organism
	) 
	generateEOLCreationScipt(
		topLevelInstance: TreeObjects.Organism
		metamodelPackage: TreeMetamodels  
	)          
	runM2TTransformation(
		filename: "OrganismTreeType1"
    	topLevelInstance: TreeObjects.Organism    
    	transformer: TreeTransformations.Type1Transformer  
    )  
    runM2TTransformation(
    	filename: "AnimalTreeType1"    
    	topLevelInstance: TreeObjects.Animal    
    	transformer: TreeTransformations.Type1Transformer
    )
    runM2TTransformation(  
    	filename: "OrganismTreeType2"
    	topLevelInstance: TreeObjects.Organism    
    	transformer: TreeTransformations.Type2Transformer
    )
    runM2TTransformation( 
    	filename: "AnimalTreeType2"
    	topLevelInstance: TreeObjects.Animal  
    	transformer: TreeTransformations.Type2Transformer
    )
    measureComplexity(
    	filename: "TreeModel"
    	definitionPackages: TreeMetamodels TreeObjects
    )
    query TreeHasOneOrMoreChildren (
		TreeObjects::Tree
			->Tree.children.sizeIsGreaterThan(1)
	)->resultsToText()->resultsToDiagram()
	query TreeHasNoChildren (
		TreeObjects::Tree
			->Tree.children.sizeIsEqual(0)
	)->resultsToText()->resultsToDiagram()
    generateProjectWebPage(
		title: "Systext Demo: DataStructure/Tree"
		taskPackages: Tree 
	)
}